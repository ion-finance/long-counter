#include "imports/stdlib.fc";

const op::increase = "op::increase"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case
const op::excute = "op::excute"c;

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int ctx_id;
global int ctx_counter;
global cell queue;
global cell counters;

() send_simple_message(int amount, slice to, cell body, int mode) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(1, 107)
        .store_ref(body)
        .end_cell();
    send_raw_message(msg, mode);
}

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_id = ds~load_uint(32);
    ctx_counter = ds~load_uint(32);
    queue = ds~load_dict();
    counters = ds~load_dict();

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_id, 32)
            .store_uint(ctx_counter, 32)
            .store_dict(queue)
            .store_dict(counters)
            .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::increase) {
        (int counter, int order_index) = (in_msg_body~load_uint(64), in_msg_body~load_uint(64));

        ctx_counter += 1;

        builder body = begin_cell()
            .store_uint(op::excute, 32)
            .store_uint(query_id, 64)
            .store_uint(counter + 1, 64)
            .store_uint(order_index, 64);

        send_simple_message(0, sender_address, body.end_cell(), 128); ;; mode = carry all

        save_data();
        return ();
    }

    if (op == op::excute) {
        (int counter, int order_index) = (in_msg_body~load_uint(64), in_msg_body~load_uint(64));
        (slice counter_address, int counters_flag) = counters.udict_get?(64, counter % 3);
        throw_unless(100, counters_flag);

        int is_end = false;

        if( (counter >= 3) & (counter % 3 == 0) ) {
            queue~idict_delete?(64, order_index);
            (int next_order_index, slice cs, var f) = queue.udict_get_next?(64, -1);

            order_index = next_order_index;
            if(~ f){
                is_end = true;
            }
        }

        if(~ is_end) {
            builder body = begin_cell()
                .store_uint(op::increase, 32)
                .store_uint(query_id, 64)
                .store_uint(counter, 64)
                .store_uint(order_index, 64);

            send_simple_message(0, counter_address, body.end_cell(), 128); ;; mode = carry all
        }

        ctx_counter += 1;
        save_data();
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

int get_counter() method_id {
    load_data();
    return ctx_counter;
}

int get_id() method_id {
    load_data();
    return ctx_id;
}
